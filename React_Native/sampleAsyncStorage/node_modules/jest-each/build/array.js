'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _util;

function _load_util() {
  return (_util = _interopRequireDefault(require('util')));
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj};
}

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++)
      arr2[i] = arr[i];
    return arr2;
  } else {
    return Array.from(arr);
  }
}

exports.default = defaultGlobal => parameterRows => {
  const tests = parameterisedTests(parameterRows);

  const globalTest = defaultGlobal.test;
  const test = tests(globalTest);
  test.skip = tests(globalTest.skip);
  test.only = tests(globalTest.only);

  const globalIt = defaultGlobal.it;
  const it = tests(globalIt);
  it.skip = tests(globalIt.skip);
  it.only = tests(globalIt.only);

  const xtest = tests(defaultGlobal.xtest);
  const xit = tests(defaultGlobal.xit);
  const fit = tests(defaultGlobal.fit);

  const globalDescribe = defaultGlobal.describe;
  const describe = tests(globalDescribe);
  describe.skip = tests(globalDescribe.skip);
  describe.only = tests(globalDescribe.only);
  const fdescribe = tests(defaultGlobal.fdescribe);
  const xdescribe = tests(defaultGlobal.xdescribe);

  return {describe, fdescribe, fit, it, test, xdescribe, xit, xtest};
};

const parameterisedTests = parameterRows => globalCb => (title, test) => {
  parameterRows.forEach(params =>
    globalCb(
      (_util || _load_util()).default.format.apply(
        (_util || _load_util()).default,
        [title].concat(_toConsumableArray(params))
      ),
      applyTestParams(params, test)
    )
  );
};

const applyTestParams = (params, test) => {
  if (params.length < test.length)
    return done =>
      test.apply(undefined, _toConsumableArray(params).concat([done]));

  return () => test.apply(undefined, _toConsumableArray(params));
};
